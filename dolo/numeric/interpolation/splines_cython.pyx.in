from __future__ import division

import numpy as np
from cython import double, float

ctypedef fused floating:
    float 
    double



from splines_filter import filter_data

class USpline:

    def __init__(self, smin, smax, orders, data, dtype=np.double):
        smin = np.array(smin,dtype=dtype)
        smax = np.array(smax,dtype=dtype)
        orders = np.array(orders,dtype=np.int)
        self.smin = smin
        self.smax = smax
        self.orders = orders
        self.d = len(smin)
        self.delta = (smax-smin)/(orders-1)
        self.delta_inv = 1.0/self.delta
        data = np.ascontiguousarray(data, dtype=np.double)   # filter should accept floats
        coefs = filter_data( np.array(self.delta_inv, dtype=np.double), data)
        self.coefs = np.ascontiguousarray( coefs, dtype=dtype )


class MUSpline:

    def __init__(self, smin, smax, orders, data):

        smin = np.array(smin,dtype=np.double)
        smax = np.array(smax,dtype=np.double)
        orders = np.array(orders,dtype=np.int)
        self.smin = smin
        self.smax = smax
        self.orders = orders
        self.d = len(smin)
        self.delta = (smax-smin)/(orders-1)
        self.delta_inv = 1.0/self.delta
        self.n_m = data.shape[0]
        coefs = np.concatenate( [filter_data(self.delta_inv, data[i,...]) for i in range(self.n_m) ] )
        self.coefs = coefs.reshape( (self.n_m, -1) )



A44d = np.array([
   [-1.0/6.0,  3.0/6.0, -3.0/6.0, 1.0/6.0],
   [ 3.0/6.0, -6.0/6.0,  0.0/6.0, 4.0/6.0],
   [-3.0/6.0,  3.0/6.0,  3.0/6.0, 1.0/6.0],
   [ 1.0/6.0,  0.0/6.0,  0.0/6.0, 0.0/6.0]
])

dA44d = np.array([
   [ 0.0, -0.5,  1.0, -0.5],
   [ 0.0,  1.5, -2.0,  0.0],
   [ 0.0, -1.5,  1.0,  0.5],
   [ 0.0,  0.5,  0.0,  0.0]
])

d2A44d = np.array([
   [ 0.0, 0.0, -1.0,  1.0],
   [ 0.0, 0.0,  3.0, -2.0],
   [ 0.0, 0.0, -3.0,  1.0],
   [ 0.0, 0.0,  1.0,  0.0]
])


import cython
from libc.math cimport floor
from cython.parallel import parallel, prange
from cython import nogil


def eval_MUBspline( smin, smax, orders, coefs, svec, diff=False):

    resp = np.empty( (coefs.shape[0], svec.shape[1] ),  )
    if diff:
        dresp = np.empty( (coefs.shape[0], svec.shape[0], svec.shape[1]) )

    for i in range( coefs.shape[0] ):
        if not diff:
            resp[i,:] = eval_UBspline( smin, smax, orders, coefs[i,...], svec, diff=False)
        else:
            [v,dv] = eval_UBspline( smin, smax, orders, coefs[i,...], svec, diff=True)
            resp[i,:] = v
            dresp[i,:,:] = dv

    if diff:
        return resp
    else:
        return [resp, dresp]



def eval_UBspline( smin, smax, orders, coefs, svec, diff=False):

    order = coefs.ndim
    # check that coefs and svec have consistent dimensions 

    if order not in range(1,{{max_order}}+1):
        raise Exception('Evaluation of {}-d splines not implemented')

    {{for d in range(1,max_order+1)}}
    elif order == {{d}}:
        if not diff:
            if smin.dtype == np.float64:
                return eval_UBspline_{{d}}[double]( smin, smax, orders, coefs, svec )
            elif smin.dtype == np.float32:
                return eval_UBspline_{{d}}[float]( smin, smax, orders, coefs, svec )
            else:
                raise Exception('Unsupported type')
        else:
            return eval_UBspline_{{d}}_g( smin, smax, orders, coefs, svec )
    {{endfor}}





{{for d in range(1,max_order+1)}}


@cython.boundscheck(False)
@cython.wraparound(False)
cdef eval_UBspline_{{d}}( floating[:] smin, floating[:] smax, long[:] orders,  floating[{{str.join(',',[':']*(d-1)+['::1'])}}] coefs, floating[:,::1] svec):
        
        
    {{for i in range(d)}}
    cdef int M{{i}} = orders[{{i}}]
    cdef floating start{{i}} = smin[{{i}}]
    cdef floating dinv{{i}} = (orders[{{i}}]-1.0)/(smax[{{i}}]-smin[{{i}}])
    {{endfor}}
                    
    if floating is double:
        dtype = np.float64
    else:
        dtype = np.float32
        
    cdef floating val

    cdef int N = svec.shape[1]

    cdef int n

    cdef floating[:,::1] Ad = np.array(A44d, dtype=dtype)
    cdef floating[:,::1] dAd = np.array(dA44d, dtype=dtype)

    cdef int {{    str.join(', ',['i{}'.format(i) for i in range(d)])   }}
    cdef floating {{    str.join(', ',['x{}'.format(i) for i in range(d)])   }}
    cdef floating {{    str.join(', ',['u{}'.format(i) for i in range(d)])   }}
    cdef floating {{    str.join(', ',['t{}'.format(i) for i in range(d)])   }}
    cdef floating {{    str.join(', ',['extrap{}'.format(i) for i in range(d)])   }}
    
    cdef floating {{    str.join(', ',['Phi{}_{}'.format(i,j) for i in range(d) for j in range(4)])   }}
    cdef floating {{    str.join(', ',['tp{}_{}'.format(i,j) for i in range(d) for j in range(4)])   }}

    cdef floating [{{str.join(',',[':']*(d-1)+['::1'])}}] C = coefs
    cdef floating [:] vals = np.zeros(N, dtype=dtype)

    cdef floating tpx_0, tpx_1, tpx_2, tpx_3
    cdef floating tpy_0, tpy_1, tpy_2, tpy_3

    with nogil, parallel():

        for n in prange(N):

            {{for i in range(d)}}
            x{{i}} = svec[{{i}},n]
            {{endfor}}

            
            {{for i in range(d)}}
            u{{i}} = (x{{i}} - start{{i}})*dinv{{i}}
            i{{i}} = <int> u{{i}}
            i{{i}} = max( min(i{{i}},M{{i}}-2), 0 )
            t{{i}} = u{{i}}-i{{i}}
            {{endfor}}


            # {{for i in range(d)}}
            # extrap{{i}} = 0 if (t{{i}} < 0 or t{{i}} >= 1) else 1
            # {{endfor}}

            {{for i in range(d)}}
            tp{{i}}_0 = t{{i}}*t{{i}}*t{{i}};  tp{{i}}_1 = t{{i}}*t{{i}};  tp{{i}}_2 = t{{i}};  tp{{i}}_3 = 1.0;
            {{endfor}}


            {{for i in range(d)}}

            if t{{i}} < 0:
                Phi{{i}}_0 = dAd[0,3]*t{{i}} + Ad[0,3]
                Phi{{i}}_1 = dAd[1,3]*t{{i}} + Ad[1,3]
                Phi{{i}}_2 = dAd[2,3]*t{{i}} + Ad[2,3]
                Phi{{i}}_3 = dAd[3,3]*t{{i}} + Ad[3,3]
            elif t{{i}} > 1:
                Phi{{i}}_0 = (3*Ad[0,0] + 2*Ad[0,1] + Ad[0,2])*(t{{i}}-1) + (Ad[0,0]+Ad[0,1]+Ad[0,2]+Ad[0,3])
                Phi{{i}}_1 = (3*Ad[1,0] + 2*Ad[1,1] + Ad[1,2])*(t{{i}}-1) + (Ad[1,0]+Ad[1,1]+Ad[1,2]+Ad[1,3])
                Phi{{i}}_2 = (3*Ad[2,0] + 2*Ad[2,1] + Ad[2,2])*(t{{i}}-1) + (Ad[2,0]+Ad[2,1]+Ad[2,2]+Ad[2,3])
                Phi{{i}}_3 = (3*Ad[3,0] + 2*Ad[3,1] + Ad[3,2])*(t{{i}}-1) + (Ad[3,0]+Ad[3,1]+Ad[3,2]+Ad[3,3])
            else:
                Phi{{i}}_0 = (Ad[0,0]*tp{{i}}_0 + Ad[0,1]*tp{{i}}_1 + Ad[0,2]*tp{{i}}_2 + Ad[0,3]*tp{{i}}_3)
                Phi{{i}}_1 = (Ad[1,0]*tp{{i}}_0 + Ad[1,1]*tp{{i}}_1 + Ad[1,2]*tp{{i}}_2 + Ad[1,3]*tp{{i}}_3)
                Phi{{i}}_2 = (Ad[2,0]*tp{{i}}_0 + Ad[2,1]*tp{{i}}_1 + Ad[2,2]*tp{{i}}_2 + Ad[2,3]*tp{{i}}_3)
                Phi{{i}}_3 = (Ad[3,0]*tp{{i}}_0 + Ad[3,1]*tp{{i}}_1 + Ad[3,2]*tp{{i}}_2 + Ad[3,3]*tp{{i}}_3)
            {{endfor}}

            vals[n] = {{values[d]}}

    return vals

{{endfor}}


{{for d in range(1,max_order+1)}}

@cython.boundscheck(False)
@cython.wraparound(False)
cdef eval_UBspline_{{d}}_g( smin, smax, orders, coefs, double[:,::1] svec):
        
        
    {{for i in range(d)}}
    cdef double start{{i}} = smin[{{i}}]
    cdef double dinv{{i}} = (orders[{{i}}]-1.0)/(smax[{{i}}]-smin[{{i}}])
    {{endfor}}
                    

    cdef double val

    cdef int N = svec.shape[1]

    cdef int n

    cdef double[:,::1] Ad = A44d
    cdef double[:,::1] dAd = dA44d

    cdef int {{    str.join(', ',['i{}'.format(i) for i in range(d)])   }}
    cdef double {{    str.join(', ',['x{}'.format(i) for i in range(d)])   }}
    cdef double {{    str.join(', ',['u{}'.format(i) for i in range(d)])   }}
    cdef double {{    str.join(', ',['t{}'.format(i) for i in range(d)])   }}
    cdef double {{    str.join(', ',['extrap{}'.format(i) for i in range(d)])   }}
    
    cdef double {{    str.join(', ',['Phi{}_{}'.format(i,j) for i in range(d) for j in range(4)])   }}
    cdef double {{    str.join(', ',['dPhi{}_{}'.format(i,j) for i in range(d) for j in range(4)])   }}
    cdef double {{    str.join(', ',['tp{}_{}'.format(i,j) for i in range(d) for j in range(4)])   }}

    cdef double[{{str.join(',',[':']*(d-1)+['::1'])}}] C = coefs

    cdef double[:] vals = np.zeros(N)
    cdef double[:,::1] dvals = np.zeros(({{d}},N))

    cdef double tpx_0, tpx_1, tpx_2, tpx_3
    cdef double tpy_0, tpy_1, tpy_2, tpy_3

    with nogil, parallel():

        for n in prange(N):

            {{for i in range(d)}}
            x{{i}} = svec[{{i}},n]
            {{endfor}}

            
            {{for i in range(d)}}
            u{{i}} = (x{{i}} - start{{i}})*dinv{{i}}
            i{{i}} = <int> u{{i}}
            t{{i}} = u{{i}}-i{{i}}
            {{endfor}}

            {{for i in range(d)}}
            extrap{{i}} = 0 if (t{{i}} < 0 or t{{i}} >= 1) else 1
            {{endfor}}

            {{for i in range(d)}}
            tp{{i}}_0 = t{{i}}*t{{i}}*t{{i}}*extrap{{i}};  tp{{i}}_1 = t{{i}}*t{{i}};  tp{{i}}_2 = t{{i}};  tp{{i}}_3 = 1.0;
            {{endfor}}


            {{for i in range(d)}}
            Phi{{i}}_0 = (Ad[0,0]*tp{{i}}_0 + Ad[0,1]*tp{{i}}_1 + Ad[0,2]*tp{{i}}_2 + Ad[0,3]*tp{{i}}_3)
            Phi{{i}}_1 = (Ad[1,0]*tp{{i}}_0 + Ad[1,1]*tp{{i}}_1 + Ad[1,2]*tp{{i}}_2 + Ad[1,3]*tp{{i}}_3)
            Phi{{i}}_2 = (Ad[2,0]*tp{{i}}_0 + Ad[2,1]*tp{{i}}_1 + Ad[2,2]*tp{{i}}_2 + Ad[2,3]*tp{{i}}_3)
            Phi{{i}}_3 = (Ad[3,0]*tp{{i}}_0 + Ad[3,1]*tp{{i}}_1 + Ad[3,2]*tp{{i}}_2 + Ad[3,3]*tp{{i}}_3)
            {{endfor}}

            {{for i in range(d)}}
            dPhi{{i}}_0 = (dAd[0,0]*tp{{i}}_0 + dAd[0,1]*tp{{i}}_1 + dAd[0,2]*tp{{i}}_2 + dAd[0,3]*tp{{i}}_3)*dinv{{i}}
            dPhi{{i}}_1 = (dAd[1,0]*tp{{i}}_0 + dAd[1,1]*tp{{i}}_1 + dAd[1,2]*tp{{i}}_2 + dAd[1,3]*tp{{i}}_3)*dinv{{i}}
            dPhi{{i}}_2 = (dAd[2,0]*tp{{i}}_0 + dAd[2,1]*tp{{i}}_1 + dAd[2,2]*tp{{i}}_2 + dAd[2,3]*tp{{i}}_3)*dinv{{i}}
            dPhi{{i}}_3 = (dAd[3,0]*tp{{i}}_0 + dAd[3,1]*tp{{i}}_1 + dAd[3,2]*tp{{i}}_2 + dAd[3,3]*tp{{i}}_3)*dinv{{i}}
            {{endfor}}


            vals[n] = {{values[d]}}

            {{for i in range(d)}}
            dvals[{{i}},n] = {{dvalues[d][i]}} 
            {{endfor}}

    return [vals,dvals]

{{endfor}}
