
# generation options
{{py:
max_d = 5
use_open_mp = True
}}

# some helper functions
{{py:
def create_closure():
    '''This function is only a wok around to avoid a tempita bug
    forbidding the definition of recursive functions.'''

    def index(inds):
        return str.join('',  [str(e) for e in inds] )

    def rindex(binds):
        M = ['M_{}*'.format(i) for i in range(len(binds)-1)] + ['']
        N = ['(q_{}{})'.format(n,'+1'*i) for n,i in enumerate(binds)]
        return str.join(' + ',  [ str.join('', e) for e in zip(M,N) ])

    def make_formula(d,ind,mm):
        if len(ind) == d:
            return 'v_{}'.format(index(ind))
        else:
            j = len(ind)
            ind1 = ind + (0,)
            ind2 = ind + (1,)
            s = "(1-lam_{j})*({a}) + (lam_{j})*({b})".format(j=j, a=make_formula(d,ind1,mm), b=make_formula(d,ind2,mm))
            return s
    return [index, rindex, make_formula]

[index, rindex, make_formula] = create_closure()

formulas = [make_formula(i,tuple([]),None) for i in range(max_d+1)]

from itertools import product
}}

from libc.math cimport fmin, fmax, floor
cimport cython
from cython.parallel import prange,parallel

cimport numpy as np
import numpy as np

ctypedef fused floating:
    float
    double

def multilinear_interpolation(floating[:] smin, floating[:] smax, long[:] orders, floating[:,::1] values, floating[:,::1] s):

    cdef int d = np.size(s,0)
    cdef int n_s = np.size(s,1)
    cdef int n_v = np.size(values,0)

    if floating is float:
        dtype = np.single
    else:
        dtype = np.double

    cdef floating[:,::1] result = np.zeros((n_v,n_s), dtype=dtype)
    cdef floating[:] vals
    cdef floating[:] res


    for i in range(n_v):
        vals = values[i,:]
        res = result[i,:]
        if False:
            pass
        {{for k in range(1,max_d)}}
        elif d=={{k}}:
            multilinear_interpolation_{{k}}d(smin, smax, orders, vals, n_s, s, res)
        {{endfor}}
        else:
            raise Exception("Can't interpolate in dimension strictly greater than {{max_d}}")

    return np.array(result,dtype=dtype)


{{for d in range(1,max_d+1)}}
@cython.boundscheck(False)
@cython.cdivision(True)
@cython.wraparound(False)
cdef multilinear_interpolation_{{d}}d(floating[:] smin, floating[:] smax,
                                  long[:] orders, floating[:] V,
                                  int n_s, floating[:,::1] s, floating[:] output):

    cdef int d = {{d}}

    cdef int i


    {{for k in range(d)}}
    cdef floating lam_{{k}}, s_{{k}}, sn_{{k}}, snt_{{k}}
    {{endfor}}

    {{for k in range(d)}}
    cdef int order_{{k}} = orders[{{k}}]
    {{endfor}}

    {{for k in range(d)}}
    cdef int q_{{k}}
    {{endfor}}

    {{for k in range(d-1)}}
    cdef int M_{{k}} = {{ str.join('*',['order_{}'.format(l) for l in range(k+1,d)])  }}
    {{endfor}}

    {{for inds in product(*([(0,1)]*d))}}
    cdef floating v_{{index(inds)}}
    {{endfor}}

    {{if use_open_mp}}
    with nogil, parallel():
        for i in prange(n_s):
    {{else}}
    with nogil:
        for i in range(n_s):
    {{endif}}

            # (s_1, ..., s_d) : evaluation point
            {{for k in range(d)}}
            s_{{k}} = s[ {{k}} , i ]
            {{endfor}}

            # (sn_1, ..., sn_d) : normalized evaluation point (in [0,1] inside the grid)
            {{for k in range(d)}}
            sn_{{k}} = (s_{{k}}-smin[{{k}}])/(smax[{{k}}]-smin[{{k}}])
            {{endfor}}

            # q_k : index of the interval "containing" s_k
            {{for k in range(d)}}
            q_{{k}} = max( min( <int>(sn_{{k}} *(order_{{k}}-1)), (order_{{k}}-2) ), 0 )
            {{endfor}}

            # lam_k : barycentric coordinate in interval k
            {{for k in range(d)}}
            lam_{{k}} = sn_{{k}}*(order_{{k}}-1) - q_{{k}}
            {{endfor}}

            # v_ij: values on vertices of hypercube "containing" the point
            {{for inds in product(*([(0,1)]*d))}}
            v_{{index(inds)}} = V[{{rindex(inds)}}]
            {{endfor}}

            # interpolated/extrapolated value
            output[i] = {{formulas[d]}}



{{endfor}}
